/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ChildGreeterInterface extends Interface {
  functions: {
    greet: TypedFunctionDescription<{ encode([]: []): string }>;

    greeting: TypedFunctionDescription<{ encode([]: []): string }>;

    setGreeting: TypedFunctionDescription<{
      encode([_greeting]: [string]): string;
    }>;

    sum: TypedFunctionDescription<{
      encode([a, b]: [BigNumberish, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class ChildGreeter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ChildGreeter;
  attach(addressOrName: string): ChildGreeter;
  deployed(): Promise<ChildGreeter>;

  on(event: EventFilter | string, listener: Listener): ChildGreeter;
  once(event: EventFilter | string, listener: Listener): ChildGreeter;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ChildGreeter;
  removeAllListeners(eventName: EventFilter | string): ChildGreeter;
  removeListener(eventName: any, listener: Listener): ChildGreeter;

  interface: ChildGreeterInterface;

  functions: {
    greet(): Promise<string>;

    greeting(): Promise<string>;

    setGreeting(
      _greeting: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    sum(a: BigNumberish, b: BigNumberish): Promise<BigNumber>;
  };

  greet(): Promise<string>;

  greeting(): Promise<string>;

  setGreeting(
    _greeting: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  sum(a: BigNumberish, b: BigNumberish): Promise<BigNumber>;

  filters: {};

  estimate: {
    greet(): Promise<BigNumber>;

    greeting(): Promise<BigNumber>;

    setGreeting(_greeting: string): Promise<BigNumber>;

    sum(a: BigNumberish, b: BigNumberish): Promise<BigNumber>;
  };
}
